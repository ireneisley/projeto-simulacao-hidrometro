@startuml Simulador de Múltiplos Hidrômetros

' ==============================================
' Diagrama de Classes - Múltiplos Hidrômetros v3.0
' Ferramenta utilizada: PlantUML
' Site usado para gerar o diagrama: https://www.plantuml.com/plantuml
'
' PRINCIPAIS MUDANÇAS:
' - Controladora gerencia MÚLTIPLOS hidrômetros (1-5)
' - ConfiguracaoDTO possui ID único para cada hidrômetro
' - Configuracao gerencia lista de configurações
' - Cada hidrômetro abre em janela separada
' - Threads independentes para cada hidrômetro
'
' Como visualizar:
' 1. Copie todo o conteúdo deste arquivo (.puml).
' 2. Acesse o site https://www.plantuml.com/plantuml
' 3. Cole o código na caixa de edição.
' 4. Clique em "Submit" para gerar a imagem do diagrama.
' ==============================================

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor White
skinparam classBorderColor Black
skinparam classArrowColor Black
top to bottom direction

' ===== Main chama Controladora =====
class Main {
    + main(args: String[]): void
}
class Controladora {
    - configuracao: Configuracao
    - hidrometros: List<Hidrometro>
    - frames: List<JFrame>
    - simulacaoAtiva: boolean
    - scheduler: ScheduledExecutorService
    - schedulerEventos: ScheduledExecutorService
    - schedulerImagens: ScheduledExecutorService
    --
    + Controladora()
    + carregarConfiguracao(arquivo: String): void
    + iniciarSimulacao(): void
    + pararSimulacao(): void
    + executar(): void
    + getHidrometros(): List<Hidrometro>
    + getHidrometro(indice: int): Hidrometro
    - iniciarThreadsSimulacao(): void
}
Main --> Controladora : chama

' ===== Núcleo =====
class Hidrometro {
    - input: Entrada
    - output: Saida
    - display: Display
    - medidor: Medidor
    - pressaoAtual: double
    - volumeTotal: double
    - funcionando: boolean
    - config: ConfiguracaoDTO
    + Hidrometro()
    + medir(): double
    + calcularPressao(): double
    + exibirImagem(): void
    + iniciar(): void
    + parar(): void
    - processarFluxo(): void
}

class Entrada {
    - vazaoEntrada: double
    - diametroEntrada: double
    - fluxoAtual: double
    - temAgua: boolean
    + Entrada(vazao: double, diametro: double)
    + getFluxoAtual(): double
    + setVazaoEntrada(vazao: double): void
    + simularFaltaAgua(): void
    + calcularFluxoComAr(): double
}

class Saida {
    - vazaoSaida: double
    - diametroSaida: double
    - fluxoSaida: double
    + Saida(vazao: double, diametro: double)
    + getFluxoSaida(): double
    + setVazaoSaida(vazao: double): void
    + calcularPressaoSaida(): double
}

class Medidor {
    - volumeAcumulado: double
    - vazaoAtual: double
    - ultimaMedicao: long
    - precisao: double
    + Medidor()
    + medirVolume(fluxo: double): double
    + calcularVazao(): double
    + resetarMedicao(): void
    + getVolumeTotal(): double
}

' ===== Display (atualizado) =====
class Display {
    - vazaoExibida: double
    - volumeExibido: double
    - pressaoExibida: double
    - statusConexao: String
    - faltaAgua: boolean
    - imagemHidrometro: BufferedImage
    --
    - frame: JFrame
    - labelVazao: JLabel
    - labelVolume: JLabel
    - labelPressao: JLabel
    - labelStatus: JLabel
    - sliderVazao: JSlider
    --
    + Display()
    + atualizarDisplay(vazao: double, volume: double, pressao: double): void
    + atualizarDados(): void
    + mostrarInterface(): void
    + ocultarInterface(): void
}

class Configuracao {
    - configuracoes: List<ConfiguracaoDTO>
    - numeroHidrometros: int
    --
    + Configuracao()
    + carregarDeArquivo(arquivo: String): void
    + validarConfiguracao(): boolean
    + getConfiguracoes(): List<ConfiguracaoDTO>
    + getConfiguracao(indice: int): ConfiguracaoDTO
    + getNumeroHidrometros(): int
    --
    ' Métodos para compatibilidade (usam primeiro hidrômetro)
    + getConfig(): ConfiguracaoDTO
    + getVazaoEntrada(): double
    + getVazaoSaida(): double
    + getChanceFaltaAgua(): int
    + getDiametroEntrada(): double
    + getDiametroSaida(): double
    + getTempoSimulacao(): int
    + getTempoAtualizacao(): int
    + getPrecisaoMedidor(): double
    + getTipoFluido(): TipoFluido
    + isModoDebug(): boolean
    --
    - criarArquivoConfiguracao(arquivo: String): void
}

' ===== ConfiguracaoDTO com ID único =====
class ConfiguracaoDTO {
    - id: String
    - vazaoEntrada: double
    - vazaoSaida: double
    - diametroEntrada: double
    - diametroSaida: double
    - chanceFaltaAgua: int
    - tempoSimulacao: int
    - tempoAtualizacao: int
    - precisaoMedidor: double
    - tipoFluido: TipoFluido
    - modoDebug: boolean
    --
    + ConfiguracaoDTO()
    + ConfiguracaoDTO(id: String, ...parâmetros)
    + id(): String
    + vazaoEntrada(): double
    + vazaoSaida(): double
    + diametroEntrada(): double
    + diametroSaida(): double
    + chanceFaltaAgua(): int
    + tempoSimulacao(): int
    + tempoAtualizacao(): int
    + precisaoMedidor(): double
    + tipoFluido(): TipoFluido
    + modoDebug(): boolean
    + isValida(): boolean
}

class GeradorImagem {
    - largura: int
    - altura: int
    - contadorImagens: int
    - qualidadeJpeg: float
    + GeradorImagem()
    + criarImagemHidrometro(dados: DadosHidrometro): BufferedImage
    + salvarImagem(imagem: BufferedImage, nome: String): void
    + salvarImagemJPEG(imagem: BufferedImage, nome: String): void
    + salvarImagemJPEG(imagem: BufferedImage, nome: String, qualidade: float): void
    + salvarImagemPNG(imagem: BufferedImage, nome: String): void
    + setQualidadeJpeg(qualidade: float): void
    - desenharMostrador(g2d: Graphics2D, dados: DadosHidrometro): void
    - obterFormatoSuportado(formato: String): boolean
}

class DadosHidrometro {
    - vazao: double
    - volume: double
    - pressao: double
    - timestamp: long
    - statusAgua: boolean
    + DadosHidrometro(vazao: double, volume: double, pressao: double)
    + getVazao(): double
    + getVolume(): double
    + getPressao(): double
    + isStatusAgua(): boolean
    + toString(): String
}

' ===== TipoFluido (sozinho) =====
class TipoFluido {
    + AGUA
    + AR
    + getDescricao(): String
    + toString(): String
}

' ===== Relacionamentos Principais =====
Main --> Controladora : chama
Controladora "1" *-- "1-5" Hidrometro : gerencia múltiplos
Controladora "1" o-- "1" Configuracao : usa
Controladora "1" *-- "1-5" JFrame : janelas separadas

' ===== Componentes do Hidrômetro =====
Hidrometro *-- Entrada : possui
Hidrometro *-- Saida : possui
Hidrometro *-- Medidor : possui
Hidrometro *-- Display : possui
Hidrometro o-- ConfiguracaoDTO : usa configuração específica
Hidrometro ..> GeradorImagem : gera imagens

' ===== Configurações =====
Configuracao "1" o-- "1-5" ConfiguracaoDTO : gerencia múltiplas
ConfiguracaoDTO ..> TipoFluido : usa enum

' ===== Utilitários =====
GeradorImagem ..> DadosHidrometro : recebe dados
Display ..> Hidrometro : exibe dados

' ===== Notas importantes =====
note right of Controladora
  **MÚLTIPLOS HIDRÔMETROS v3.0**
  • Gerencia 1-5 hidrômetros simultaneamente
  • Cada hidrômetro em janela separada
  • Threads independentes por hidrômetro
  • Configurações individuais por hidrômetro
end note

note right of ConfiguracaoDTO
  **ID ÚNICO**
  Cada hidrômetro tem 
  identificador único:
  • HIDROMETRO_1
  • HIDROMETRO_2
  • HIDROMETRO_3
  • HIDROMETRO_4
  • HIDROMETRO_5
end note

@enduml